

import User from '../../Modal/Users/User.js';
import UserRegistration from '../../Modal/Users/UserRegistration.js';
import { sendOtpEmail } from '../../Utils/services/sendOtpEmail.js';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import mongoose from 'mongoose';
import { generateOTP, setOtpExpiry } from '../../Utils/generateOtp.js';
import axios from 'axios';
import Company from '../../Modal/Compony/ComponyModal.js';
import Salon from '../../Modal/Salon/Salon.js';
import Candidate from '../../Modal/Candidate/Candidate.js';

import { sendWhatsAppOtp, verifyWhatsAppOtp } from '../../Utils/whatsapp.js';
const TEMPLATE = process.env.WHATSAPP_TEMPLATE_NAME
// Helper function to set OTP expiry (10 minutes from now)




// Register User
export const register = async (req, res) => {
    try {
        const { name, password, domain_type, whatsapp_number } = req.body;

        console.log("Registration attempt for:", { name, email, whatsapp_number });

        // Check if user exists
        const existingUser = await User.findOne(
            { whatsapp_number }
        );

        if (existingUser) {
            return res.status(400).json({
                success: false,
                message: "User already exists with this email or WhatsApp number",
            });
        }

        // Send OTP via WhatsApp (auto-generated by service)
        console.log("Sending WhatsApp OTP...");
        const otpResponse = await sendWhatsAppOtp(whatsapp_number);

        console.log("OTP Response:", otpResponse.data);



        if (!otpResponse.success) {
            // console.error("WhatsApp OTP failed. Response:", otpResponse);


            return res.status(400).json({
                success: false,
                message: "Otp Varification Filed",

            });



        }

        // Safely extract and handle UID
        const whatsappUid = otpResponse.data;

        // Create user with WhatsApp UID
        const newUser = new User({
            name,
            
            password,
            domain_type,
            whatsapp_number,
            whatsapp_uid: whatsappUid,
            otp_sent_at: new Date(),
            otp_expires_at: setOtpExpiry(),
            otp_verified: false,
        });

        const user = await newUser.save();


        // Create User Registration if salon
        if (domain_type === 'company') {
            const newCompany = new Company({
                user_id: newUser._id,
                whatsapp_number: newUser.whatsapp_number,


            });
            await newCompany.save();
        } else if (domain_type === 'salon') {
            const newSalon = new Salon({
                user_id: newUser._id,
                whatsapp_number: newUser.whatsapp_number,

            });
            await newSalon.save();
        } else if (domain_type === 'worker') {
            const newCandidate = new Candidate({
                user_id: newUser._id,
                contact_no: newUser.whatsapp_number,
            });

            await newCandidate.save();
        }

        return res.status(201).json({
            success: true,
            message: "User registered successfully. OTP sent via WhatsApp.",
            data: {
                userId: user._id,
                whatsapp_number: user.whatsapp_number,
                otpSent: true
            },
        });

    } catch (error) {
        console.error("Registration error:", error);

        return res.status(500).json({
            success: false,
            message: "Internal server error",
            error: process.env.NODE_ENV === "development" ? error.message : undefined
        });
    }
};

// Verify OTP
export const verifyOtp = async (req, res) => {
    try {
        const { whatsapp_number, otp } = req.body;

        // Validate inputs
        if (!whatsapp_number || !/^\d{10,15}$/.test(whatsapp_number)) {
            return res.status(422).json({ success: false, message: "Invalid WhatsApp number" });
        }
        if (!otp || !/^\d{4,6}$/.test(otp)) {
            return res.status(422).json({ success: false, message: "Invalid OTP format" });
        }

        // Find user
        const user = await User.findOne({ whatsapp_number });
        if (!user) {
            return res.status(404).json({ success: false, message: "User not found" });
        }



        // Check OTP expiry
        if (!user.isOtpValid()) {
            return res.status(400).json({ success: false, message: "OTP expired. Request new one" });
        }

        // Check if we have a UID
        if (!user.whatsapp_uid) {
            return res.status(400).json({
                success: false,
                message: "OTP session invalid. Please request a new OTP."
            });
        }

        // Verify OTP with WhatsApp service
        const verificationResponse = await verifyWhatsAppOtp(user.whatsapp_uid, otp);
        console.log("verificationResponse", verificationResponse)

        if (!verificationResponse.success) {
            // Increment OTP attempts
            user.otp_attempts += 1;
            await user.save();

            return res.status(400).json({
                success: false,
                message: "Invalid OTP. Please check and try again",
                attempts: user.otp_attempts
            });
        }

        // OTP verified successfully
        user.otp_verified = true;
        user.otp_attempts = 0;
        user.otp_expires_at = null;

        // Generate tokens
        const { accessToken, refreshToken } = user.generateTokens();
        user.access_token = accessToken;
        user.refresh_token = refreshToken;

        await user.save();

        return res.status(200).json({
            success: true,
            message: "WhatsApp number verified successfully",
            data: {
                accessToken,
                refreshToken,
                user: {
                    id: user._id,
                    name: user.name,
                    email: user.email,
                    domain_type: user.domain_type,
                    email_verified_at: user.email_verified_at,
                    whatsapp_number: user.whatsapp_number
                }
            }
        });

    } catch (error) {
        console.error("OTP verification error:", error?.response?.data || error.message);
        return res.status(500).json({
            success: false,
            message: "OTP verification failed",
            error: process.env.NODE_ENV === "development" ? (error?.response?.data || error.message) : undefined,
        });
    }
};

// Request Password Reset
export const requestPasswordReset = async (req, res) => {
    try {
        const { whatsapp_number } = req.body;

        // Find user by WhatsApp number
        const user = await User.findOne({ whatsapp_number });
        if (!user) {
            return res.status(404).json({
                success: false,
                message: "User not found",
            });
        }

        // Prevent spam - if OTP sent within last 2 minutes
        const recentOtpTime = new Date(Date.now() - 2 * 60 * 1000);
        if (user.otp_sent_at && user.otp_sent_at > recentOtpTime) {
            return res.status(429).json({
                success: false,
                message: "OTP already sent recently. Please wait before requesting another.",
            });
        }

        // Send OTP via WhatsApp (auto-generated by service)
        const otpResponse = await sendWhatsAppOtp(whatsapp_number);

        if (!otpResponse.success) {
            console.error("WhatsApp OTP failed:", otpResponse.error);
            return res.status(500).json({
                success: false,
                message: "Failed to send OTP via WhatsApp",
                error: process.env.NODE_ENV === "development" ? otpResponse.error : undefined
            });
        }

        // Safely extract and handle UID
        const whatsappUid = otpResponse.data;

        // Update user with new WhatsApp UID and OTP info
        user.whatsapp_uid = whatsappUid;
        user.otp_sent_at = new Date();
        user.otp_expires_at = setOtpExpiry();
        user.otp_verified = false;
        user.otp_attempts = 0;
        await user.save();

        return res.status(200).json({
            success: true,
            message: "OTP sent successfully for password reset via WhatsApp",
            data: {
                userId: user._id,
                whatsapp_number,
                otpSent: true
            },
        });
    } catch (error) {
        console.error("Password reset request error:", error);

        if (error.message && error.message.includes('truncated')) {
            return res.status(500).json({
                success: false,
                message: "Database storage error. Please contact support.",
            });
        }

        return res.status(500).json({
            success: false,
            message: "Internal server error",
        });
    }
};

// Reset Password (verify OTP + update password)
export const resetPassword = async (req, res) => {
    try {
        const { whatsapp_number, otp, newPassword } = req.body;

        // Find user
        const user = await User.findOne({ whatsapp_number });
        if (!user) {
            return res.status(404).json({
                success: false,
                message: "User not found",
            });
        }

        // Check OTP expiry
        if (!user.isOtpValid()) {
            return res.status(400).json({
                success: false,
                message: "OTP expired. Request new one",
            });
        }

        // Check if we have a UID
        if (!user.whatsapp_uid) {
            return res.status(400).json({
                success: false,
                message: "OTP session invalid. Please request a new OTP."
            });
        }

        // Verify OTP with WhatsApp service
        const verificationResponse = await verifyWhatsAppOtp(user.whatsapp_uid, otp);

        if (!verificationResponse.success) {
            // Increment OTP attempts
            user.otp_attempts += 1;
            await user.save();

            return res.status(400).json({
                success: false,
                message: "Invalid OTP. Please check and try again",
                attempts: user.otp_attempts
            });
        }

        // OTP is valid → reset password
        user.password = newPassword;
        user.otp_verified = true;
        user.otp_attempts = 0;
        user.otp_expires_at = null;
        await user.save();

        return res.status(200).json({
            success: true,
            message: "Password reset successfully",
        });
    } catch (error) {
        console.error("Password reset error:", error);
        return res.status(500).json({
            success: false,
            message: "Internal server error",
        });
    }
};


// Resend OTP
export const resendOtp = async (req, res) => {
    try {
        const { whatsapp_number } = req.body;

        // ✅ Find user
        const user = await User.findOne({ whatsapp_number });
        if (!user) {
            return res.status(404).json({
                success: false,
                message: "User not found"
            });
        }

        const name = user.name;
        const otp = generateOTP(4, "numeric");

        // ✅ Send OTP via WhatsApp
        const otpResponse = await sendWhatsAppMessage(
            whatsapp_number,
            process.env.WHATSAPP_TEMPLATE_NAME || "otp_verification_template",
            [name, otp, "valid for 10 minutes", ""]
        );


        if (!otpResponse?.data) {
            return res.status(500).json({
                success: false,
                message: "Failed to send OTP via WhatsApp"
            });
        }


        // ✅ Save new OTP + UID
        if (otpResponse.data) {
            user.whatsapp_uid = otpResponse.data;  // 🔹 store provider UID
        }
        user.otp_code = otp;                          // keep OTP for internal checks if needed
        user.otp_expires_at = setOtpExpiry();
        await user.save();

        return res.status(200).json({
            success: true,
            message: "OTP resent successfully",
            data: {
                email: user.email,
                otpSent: true
            }
        });
    } catch (error) {
        console.error("Resend OTP error:", error);
        return res.status(500).json({
            success: false,
            message: "Internal server error",
            error: error.message
        });
    }
};


// Login user
export const login = async (req, res) => {
    try {
        const { whatsapp_number, password, deviceToken } = req.body;

        // Validate required fields
        if (!whatsapp_number || !password) {
            return res.status(400).json({
                success: false,
                message: 'WhatsApp number and password are required'
            });
        }

        // Find user with password
        const user = await User.findOne({ whatsapp_number }).select('+password');

        if (!user) {
            return res.status(401).json({
                success: false,
                message: 'Invalid credentials'
            });
        }

        // Check password
        const isMatch = await user.matchPassword(password);
        if (!isMatch) {
            return res.status(401).json({
                success: false,
                message: 'Invalid credentials'
            });
        }

        // Handle OTP verification if not verified
        if (!user.otp_verified) {
            try {
                const otp = generateOTP(4, "numeric");
                const otpResponse = await sendWhatsAppMessage(
                    user.whatsapp_number,
                    process.env.WHATSAPP_TEMPLATE_NAME || "otp_verification_template",
                    [user.name, otp, "valid for 10 minutes", ""]
                );

                if (!otpResponse?.success) {
                    return res.status(500).json({
                        success: false,
                        message: 'Account not verified. Failed to resend OTP.'
                    });
                }

                user.otp_code = otp;
                user.otp_expires_at = setOtpExpiry();
                await user.save();

                return res.status(403).json({
                    success: false,
                    message: 'Account not verified. New OTP sent to your WhatsApp.',
                    data: {
                        requiresOtpVerification: true,
                        userId: user._id,
                        whatsapp_number: user.whatsapp_number
                    }
                });
            } catch (otpError) {
                console.error('OTP sending error:', otpError);
                return res.status(500).json({
                    success: false,
                    message: 'Error during OTP verification process'
                });
            }
        }

        // Update device token if provided
        if (deviceToken) {
            user.devicetoken = deviceToken; // Ensure this matches your schema
            await user.save();
        }

        // Generate tokens
        const { accessToken, refreshToken } = user.generateTokens();

        // Update tokens in user document
        user.access_token = accessToken;
        user.refresh_token = refreshToken;
        await user.save();

        // Prepare response
        const userData = {
            id: user._id,
            name: user.name,
            email: user.email,
            whatsapp_number: user.whatsapp_number,
            domain_type: user.domain_type,
        };

        return res.status(200).json({
            success: true,
            message: 'Login successful',
            data: {
                accessToken,
                refreshToken,
                user: userData
            }
        });

    } catch (error) {
        console.error('Login error:', error);
        return res.status(500).json({
            success: false,
            message: 'Internal server error',
            error: error.message
        });
    }
};




// Refresh access token
export const refreshToken = async (req, res) => {
    try {
        const { refresh_token } = req.body;

        if (!refresh_token) {
            return res.status(400).json({
                success: false,
                message: 'Refresh token is required'
            });
        }

        // Verify refresh token
        const decoded = jwt.verify(refresh_token, process.env.JWT_REFRESH_SECRET);

        // Find user
        const user = await User.findById(decoded.id);
        if (!user || user.refresh_token !== refresh_token) {
            return res.status(401).json({
                success: false,
                message: 'Invalid refresh token'
            });
        }

        // Generate new tokens
        const { accessToken, refreshToken } = user.generateTokens();

        // Update user with new tokens
        user.access_token = accessToken;
        user.refresh_token = refreshToken;
        await user.save();

        res.status(200).json({
            success: true,
            message: 'Token refreshed successfully',
            data: {
                accessToken,
                refreshToken
            }
        });
    } catch (error) {
        console.error('Token refresh error:', error);
        if (error.name === 'JsonWebTokenError') {
            return res.status(401).json({
                success: false,
                message: 'Invalid refresh token'
            });
        }
        res.status(500).json({
            success: false,
            message: 'Internal server error',
            error: error.message
        });
    }
};


